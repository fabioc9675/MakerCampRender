# -*- coding: utf-8 -*-
"""PlantillaCampamentoMaker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NSA6028d0hiWkl2rAl0y4DTksUoWmjlY

<figure>
    <img src="https://i.imgur.com/x33dUXh.png" width=1400>
</figure>

<h1 align="center">Campamento Maker 2023</h1>
<h1 align="center">Plantilla para la solución del reto</h1>
<p align="center">por</p>
<h3 align="center">Equipo Formación Campamento Maker</h3>



El reto consiste en proporcionar una visión de la distribución real y la distribución ideal de las personas en la plataforma del metro en la estación San Antonio. Para ello, se superpondrá una imagen creada por los estudiantes sobre una maqueta. En este documento se proporciona una plantilla que muestra cómo subir una imegen de referencia con las dimensiones adecuadas para ser proyectada sobre la maqueta.

## Importación de librerias
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import requests

from IPython.display import display

# %matplotlib inline

"""## Conexión con Google Drive y Carga de la imagen con resolución estandar

Antes de ejecutar las siguientes lineas de código, asegurese de haber subirdo la carpeta "[Campamento Maker](https://drive.google.com/uc?id=1QUhwfTpSbnzFbkGP3KAq2RZ5okwQ8w3W&export=download)" a su Google Drive. El siguiente video es un paso a paso de cómo hacerlo luego de que la haya descargado en su computador.

<figure align="center">
    <img src="https://i.imgur.com/HR9olpO.gif" width=600>
    <figcaption align="center">El video se puede encontrar en la carpeta provista.</figcaption>
</figure>


"""

# Ejecute esta celda para conectarse con Google Drive...
from google.colab import drive
drive.mount('/content/drive')

# Crear una figura y un eje
fig, ax = plt.subplots(figsize=(11,7))

# CAMBIE ESTA RUTA SEGÚN LAS INSTRUCCIONES DEL VIDEO
direccion = '/content/drive/MyDrive/Campamento_Maker/'

# Agregar la imagen de fondo
img = plt.imread(direccion + 'crop_image.jpeg')  # Reemplaza 'background.jpg' por 'crop_image.jpeg' para tener una referencia
ax.imshow(img, extent=[0, 1280/214, 0, 720/214], alpha=1)  # **No modificar** Define los límites de la imagen

"""____________________________________
# Inicio de la solución

Aqui agregarán el código donde realizarán la distribución de las personas sobre la plataforma.

"""

ax.text(4.5,2.2, "Comfenalco Team") # Coloque el nombre de su institucion

# Recuerde que para agregar elementos a la grafica lo debe hacer sobre la variable ax asi:
#ax.scatter(3,3) # Aqui agregamos un punto en la posicion 3,3


###################################################################################
##### # Escriba su código de Python aquí... #######################################
###################################################################################

import math
import matplotlib.patches as patches #importe de librerias necesarias
porcentajes = [0.15, 0.17, 0.19, 0.18, 0.17, 0.14] #porcentajes por vagón
personas = 453 #personas que esperan en plataforma
resultado = [] #lista vacía

for i in porcentajes:
  resultado.append(math.trunc(personas*i)) # ciclo, multiplica el numero de personas por cada valor dentro de la lista porcentajes
                                           # luego, pasa los numeros a enteros, y por ultimos los mete a la lista vacia creada anteriormente
v1, v2, v3, v4, v5, v6 = resultado

v1x = np.random.rand(v1) +0.1
v1y = 0.1*np.random.rand(v1) +1.6 # numeros ubicados aleatoriamente

v2x = np.random.rand(v2) +1.1
v2y = 0.1*np.random.rand(v2) +1.6

v3x = np.random.rand(v3) +2.1
v3y = 0.1*np.random.rand(v3) +1.6

v4x = np.random.rand(v4) +3.1
v4y = 0.1*np.random.rand(v4) +1.6

v5x = np.random.rand(v5) +4.1
v5y = 0.1*np.random.rand(v5) +1.6

v6x = 0.75*np.random.rand(v6) +5.1
v6y = 0.1*np.random.rand(v6) +1.6

ax.add_patch(
  patches.Rectangle((0.1,1.25), 1, 0.25, edgecolor="black", facecolor="none", fill=False))
ax.add_patch(
  patches.Rectangle((1.1,1.25), 1, 0.25, edgecolor="black", facecolor="none", fill=False)) # graficacion de rectangulos
ax.add_patch(
  patches.Rectangle((2.1,1.25), 1, 0.25, edgecolor="black", facecolor="none", fill=False))
ax.add_patch(
  patches.Rectangle((3.1,1.25), 1, 0.25, edgecolor="black", facecolor="none", fill=False))
ax.add_patch(
  patches.Rectangle((4.1,1.25), 1, 0.25, edgecolor="black", facecolor="none", fill=False))
ax.add_patch(
  patches.Rectangle((5.1,1.25), 0.9, 0.25, edgecolor="black", facecolor="none", fill=False))




ax.plot(v1x, v1y, ".k", markersize= 5) # creación de gráficas
ax.plot(v2x, v2y, ".r", markersize= 5)
ax.plot(v3x, v3y, ".g", markersize= 5)
ax.plot(v4x, v4y, ".b", markersize= 5)
ax.plot(v5x, v5y, ".k", markersize= 5)
ax.plot(v6x, v6y, ".r", markersize= 5)

ax.text(0.1, 1.1, "Vagon 1 = 15%")
ax.text(1.1, 1.1, "Vagon 2 = 17%")
ax.text(2.1, 1.1, "Vagon 3 = 19%") # texto debajo de los vagones, indicada % de personas por vagon
ax.text(3.1, 1.1, "Vagon 4 = 18%")
ax.text(4.1, 1.1, "Vagon 5 = 17%")
ax.text(5.1, 1.1, "Vagon 6 = 14%")

ax.text(0.1, 0.9, f"{v1} personas")
ax.text(1.1, 0.9, f"{v2} personas")
ax.text(2.1, 0.9, f"{v3} personas")
ax.text(3.1, 0.9, f"{v4} personas")
ax.text(4.1, 0.9, f"{v5} personas")
ax.text(5.1, 0.9, f"{v6} personas")

ax.text(1.8, 0.7, f"Aproximado de personas en plataforma: {personas}")







###################################################################################
###################################################################################
###################################################################################

# Para mostrar su avance utilice la siguiente instruccion
display(fig)

"""## Preparación de la imagen a proyectar



"""

ax.axis('off')

# Display the plot
display(fig)

"""# Guardar Imagen


"""

# Aqui se guarda una imagen con la solucion en la carpeta del proyecto
fig.savefig(direccion + 'my_plot.png', dpi=600, bbox_inches='tight')

"""# Enviar a la Pagina Web

Este bloque de codigo se debe ejecutar solo para enviar la solución
"""

url = 'https://makercamp.onrender.com/subir-imagen' # Reemplaza con la URL de tu servidor
files = {'imagen': open(direccion + 'my_plot.png', 'rb')} # Reemplaza con la ruta de tu imagen

respuesta = requests.post(url, files=files)

print(respuesta.text)